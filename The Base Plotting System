=======================================================================  
# The Base Plotting System
=======================================================================

  
  # Simple Base Graphics

# Histogram
  
library(datasets)
hist(airquality$Ozone) ## Draw a new plot 

# Scatterplot
library(datasets)
with(airquality, plot(Wind, Ozone))

# Boxplot
library(datasets)
airquality <- transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppb)")

# Many base plotting functions share a set of parameters. Here are a few key ones:
# pch: the plotting symbol (default is open circle)
# lty: the line type (default is solid line), can be dashed, dotted, etc.
# lwd: the line width, specified as an integer multiple
# col: the plotting color, specified as a number, string, or hex code; the colors() function gives
# you a vector of colors by name
# xlab: character string for the x-axis label
# ylab: character string for the y-axis label

  
#  The par() function is used to specify global graphics parameters that affect all plots in an R
# session. These parameters can be overridden when specified as arguments to specific plotting
#  functions.
#  las: the orientation of the axis labels on the plot
#  bg: the background color
#  mar: the margin size
#  oma: the outer margin size (default is 0 for all sides)
#  mfrow: number of plots per row, column (plots are filled row-wise)
#  mfcol: number of plots per row, column (plots are filled column-wise)

# Some Important Base Graphics Parameters
par("lty")
par("col")
par("pch")


# Base Plotting Functions
#  plot: make a scatterplot, or other type of plot depending on the class of the object being plotted
#  lines: add lines to a plot, given a vector x values and a corresponding vector of y values (or a 2-
                                                                                                column matrix); this function just connects the dots
#  points: add points to a plot
#  text: add text labels to a plot using specified x, y coordinates
#  title: add annotations to x, y axis labels, title, subtitle, outer margin
#  mtext: add arbitrary text to the margins (inner or outer) of the plot
#  axis: adding axis ticks/labels

=======================================================================
# Base Plot with Annotation
  
library(datasets)
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City") ## Add a title


with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City"))
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue"))


with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City", type = "n"))
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue"))
with(subset(airquality, Month != 5), points(Wind, Ozone, col = "red"))
legend("topright", pch = 1, col = c("blue", "red"), legend = c("May", "Other Months"))

=======================================================================
# Base Plot with Regression Line
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City",pch = 20))
model <- lm(Ozone ~ Wind, airquality)
abline(model, lwd = 2)

# Multiple Base Plots
par(mfrow = c(1, 2))
with(airquality, {
  plot(Wind, Ozone, main = "Ozone and Wind")
  plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
})


par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
with(airquality, {
  plot(Wind, Ozone, main = "Ozone and Wind")
  plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
  plot(Temp, Ozone, main = "Ozone and Temperature")
  mtext("Ozone and Weather in New York City", outer = TRUE)
})


=======================================================================
  # Plotting systems comparison

# Base Plot

library(datasets)
data(cars)
with(cars, plot(speed, dist))    # Its like in cars data set plot speed and distance 

# Lattice Plot

library(lattice)
state <- data.frame(state.x77, region = state.region)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))  # Life exp vs income based on region from data set and layout is like aspect ratio

# ggplot2 Plot

library(ggplot2)
data(mpg)
qplot(displ, hwy, data = mpg)        # y, x from data mpg

=======================================================================
